{"version":3,"sources":["components/Todo.js","components/TodoList.js","components/TodoApp.js","App.js","index.js"],"names":["TodoName","styled","Button","p","isCompleted","css","Todo","todo","onCheckBtnClick","editTodo","onCrossBtnClick","useState","textInput","setTextInput","onTextInputChange","useCallback","e","target","value","shouldFitContainer","iconBefore","className","onClick","id","primaryColor","iconAfter","name","placeholder","elemAfterInput","isDisabled","appearance","onKeyDown","key","onChange","TodoList","todoList","map","TODO_APP_STORAGE_KEY","TodoApp","setTodoList","useEffect","storageTodoList","localStorage","getItem","JSON","parse","setItem","stringify","onAddBtnClick","v4","onEnterKey","prevState","newValue","filter","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d315c3cc.chunk.js","sourcesContent":["import \"./Todo.css\";\r\nimport React, { useState, useCallback } from 'react';\r\nimport styled, { css } from \"styled-components\";\r\nimport Button from '@atlaskit/button';\r\nimport Textfield from \"@atlaskit/textfield\";\r\nimport CheckIcon from \"@atlaskit/icon/glyph/check\"\r\nimport CheckBoxIcon from \"@atlaskit/icon/glyph/media-services/rectangle\"\r\nimport CrossIcon from \"@atlaskit/icon/glyph/cross\"\r\n\r\nconst TodoName = styled(Button)`\r\n    margin-top: 5px;\r\n    text-align: left;\r\n    position: relative;\r\n    \r\n    span {\r\n        margin-top: auto;\r\n        margin-bottom: auto;\r\n    }\r\n\r\n    &,&:hover{\r\n        ${(p) =>\r\n        p.isCompleted &&\r\n        css`\r\n            text-decoration: line-through;\r\n            `\r\n    }\r\n\r\n    .func-icon span {\r\n        &:hover {\r\n            background-color: #e2e2e2;\r\n            border-radius: 3px;\r\n        }\r\n    }\r\n\r\n    .checkbox-icon{\r\n        ${(p) =>\r\n        p.isCompleted &&\r\n        css`\r\n            display: none;\r\n            `\r\n    }\r\n    }\r\n\r\n    .check-icon{\r\n        ${(p) =>\r\n        !p.isCompleted &&\r\n        css`\r\n            display: none;\r\n            `\r\n    }\r\n    }\r\n`;\r\n\r\nexport default function Todo({ todo, onCheckBtnClick, editTodo, onCrossBtnClick }) {\r\n    const [textInput, setTextInput] = useState(\"\");\r\n\r\n    const onTextInputChange = useCallback((e) => {\r\n        setTextInput(e.target.value);\r\n    }, []);\r\n\r\n    const onEditBtnClick = (e) => {\r\n        editTodo(todo.id, textInput);\r\n        setTextInput(\"\");\r\n    };\r\n\r\n    const onEnterKey =\r\n        (e) => {\r\n            if (e.key === 'Enter') {\r\n                editTodo(todo.id, textInput);\r\n                setTextInput(\"\");\r\n            }\r\n        }\r\n\r\n    return (\r\n        <TodoName\r\n            shouldFitContainer\r\n            isCompleted={todo.isCompleted}\r\n            iconBefore={\r\n                <div className='func-icon'>\r\n                    <span className='check-icon' onClick={() => onCheckBtnClick(todo.id)}>\r\n                        <CheckIcon primaryColor=\"#33adff\" />\r\n                    </ span>\r\n                    <span className='checkbox-icon' onClick={() => onCheckBtnClick(todo.id)}>\r\n                        <CheckBoxIcon primaryColor=\"#33adff\" />\r\n                    </ span>\r\n                </div>\r\n            }\r\n            iconAfter={\r\n                <div className='func-icon'>\r\n                    <span className='cross-icon' onClick={() => onCrossBtnClick(todo.id)}>\r\n                        <CrossIcon primaryColor=\"#33adff\" />\r\n                    </span>\r\n                </div>\r\n            }\r\n        >\r\n            <Textfield\r\n                id=\"text-field-edit\"\r\n                name=\"update-todo\"\r\n                placeholder={todo.name}\r\n                elemAfterInput={\r\n                    <Button\r\n                        className='edit-icon'\r\n                        isDisabled={!textInput}\r\n                        appearance=\"primary\"\r\n                        onClick={() => onEditBtnClick()}\r\n                    >\r\n                        Update\r\n                    </Button>\r\n                }\r\n                onKeyDown={onEnterKey}\r\n                value={textInput}\r\n                onChange={onTextInputChange}\r\n            ></Textfield>\r\n        </TodoName>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Todo from './Todo'\r\n\r\nexport default function TodoList({ todoList, onCheckBtnClick, editTodo, onCrossBtnClick }) {\r\n    return (\r\n        <>\r\n            {\r\n                todoList.map(todo =>\r\n                    <Todo\r\n                        key={todo.id}\r\n                        todo={todo}\r\n                        onCheckBtnClick={onCheckBtnClick}\r\n                        editTodo={editTodo}\r\n                        onCrossBtnClick={onCrossBtnClick}\r\n                    />)\r\n            }\r\n        </>\r\n    );\r\n} \r\n","import \"./TodoApp.css\"\nimport { useState, useCallback, useEffect } from \"react\";\nimport TodoList from \"./TodoList\";\nimport Textfield from \"@atlaskit/textfield\";\nimport Button from \"@atlaskit/button\";\nimport { v4 } from \"uuid\";\n\nconst TODO_APP_STORAGE_KEY = \"TODO_APP\"\n\nfunction TodoApp() {\n  const [todoList, setTodoList] = useState([]);\n  const [textInput, setTextInput] = useState(\"\");\n\n  useEffect(() => {\n    const storageTodoList = localStorage.getItem(TODO_APP_STORAGE_KEY);\n    if (storageTodoList) {\n      setTodoList(JSON.parse(storageTodoList));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(TODO_APP_STORAGE_KEY, JSON.stringify(todoList))\n  }, [todoList])\n\n  const onTextInputChange = useCallback((e) => {\n    setTextInput(e.target.value);\n  }, []);\n\n  const onAddBtnClick = useCallback(\n    (e) => {\n      setTodoList([\n        { id: v4(), name: textInput, isCompleted: false },\n        ...todoList,\n      ]);\n      setTextInput(\"\");\n    },\n    [textInput, todoList]\n  );\n\n  const onEnterKey = useCallback(\n    (e) => {\n      if (textInput === \"\") {\n        return;\n      }\n      if (e.key === 'Enter') {\n        setTodoList([\n          { id: v4(), name: textInput, isCompleted: false },\n          ...todoList,\n        ]);\n\n        setTextInput(\"\");\n      }\n    }, [textInput, todoList]\n  )\n\n  const onCheckBtnClick = useCallback((id) => {\n    setTodoList(prevState =>\n      prevState.map(todo =>\n        todo.id === id ? { ...todo, isCompleted: !todo.isCompleted } : todo\n      )\n    );\n  }, []);\n\n  const editTodo = useCallback((id, newValue) => {\n    if (newValue === \"\") {\n      return;\n    }\n    setTodoList(prevState =>\n      prevState.map(todo =>\n        (todo.id === id ? { ...todo, name: newValue } : todo)\n      )\n    );\n  }, []);\n\n  const onCrossBtnClick = useCallback((id) => {\n    setTodoList(prevState =>\n      prevState.filter(todo => todo.id !== id)\n    );\n  }, []);\n\n  return (\n    <div className=\"BodyApp\">\n      <div className=\"Header\">\n        <h2>My TodoList</h2>\n      </div>\n      <div className=\"add-field\">\n        <Textfield\n          name=\"add-todo\"\n          placeholder=\"Enter your task...\"\n          elemAfterInput={\n            <Button\n              isDisabled={!textInput}\n              appearance=\"primary\"\n              onClick={onAddBtnClick}>\n              Add\n            </Button>\n          }\n          onKeyDown={onEnterKey}\n          value={textInput}\n          onChange={onTextInputChange}\n        ></Textfield>\n      </div>\n      <div className=\"todo-list\">\n        <TodoList\n          todoList={todoList}\n          onCheckBtnClick={onCheckBtnClick}\n          editTodo={editTodo}\n          onCrossBtnClick={onCrossBtnClick}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default TodoApp;","import TodoApp from \"./components/TodoApp\";\n\nfunction App() {\n  return (\n    <div className='todo-app'>\n      <TodoApp />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}